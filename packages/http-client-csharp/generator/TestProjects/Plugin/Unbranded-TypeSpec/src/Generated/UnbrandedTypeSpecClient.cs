// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using UnbrandedTypeSpec.Models;

namespace UnbrandedTypeSpec
{
    /// <summary></summary>
    public partial class UnbrandedTypeSpecClient
    {
        private ClientPipeline _pipeline;

        /// <summary> This is a sample typespec project. </summary>
        public UnbrandedTypeSpecClient()
        {
            _pipeline = ClientPipeline.Create();
        }

        internal PipelineMessage CreateSayHiRequest(string headParameter, string queryParameter, string optionalQuery, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult SayHi(string headParameter, string queryParameter, string optionalQuery, RequestOptions options)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            try
            {
                System.Console.WriteLine("Entering method SayHi.");
                Argument.AssertNotNull(headParameter, nameof(headParameter));
                Argument.AssertNotNull(queryParameter, nameof(queryParameter));

                using PipelineMessage message = CreateSayHiRequest(headParameter, queryParameter, optionalQuery, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method SayHi.");
            }
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> SayHiAsync(string headParameter, string queryParameter, string optionalQuery, RequestOptions options)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            try
            {
                System.Console.WriteLine("Entering method SayHiAsync.");
                Argument.AssertNotNull(headParameter, nameof(headParameter));
                Argument.AssertNotNull(queryParameter, nameof(queryParameter));

                using PipelineMessage message = CreateSayHiRequest(headParameter, queryParameter, optionalQuery, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method SayHiAsync.");
            }
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult SayHi(string headParameter, string queryParameter, string optionalQuery)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            return SayHi(headParameter, queryParameter, optionalQuery, null);
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> SayHiAsync(string headParameter, string queryParameter, string optionalQuery)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            return await SayHiAsync(headParameter, queryParameter, optionalQuery, null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionSayHi()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionSayHi.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionSayHi.");
            }
        }

        internal PipelineMessage CreateHelloAgainRequest(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> or <paramref name="p2"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult HelloAgain(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));

            try
            {
                System.Console.WriteLine("Entering method HelloAgain.");
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(p2, nameof(p2));

                using PipelineMessage message = CreateHelloAgainRequest(p1, p2, content, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloAgain.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> or <paramref name="p2"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> HelloAgainAsync(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));

            try
            {
                System.Console.WriteLine("Entering method HelloAgainAsync.");
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(p2, nameof(p2));

                using PipelineMessage message = CreateHelloAgainRequest(p1, p2, content, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloAgainAsync.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/>, <paramref name="p2"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult HelloAgain(string p1, string p2, RoundTripModel action)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = HelloAgain(p1, p2, action, null);
            return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/>, <paramref name="p2"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> HelloAgainAsync(string p1, string p2, RoundTripModel action)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = await HelloAgainAsync(p1, p2, action, null).ConfigureAwait(false);
            return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionHelloAgain()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionHelloAgain.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionHelloAgain.");
            }
        }

        internal PipelineMessage CreateNoContentTypeRequest(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> or <paramref name="p2"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult NoContentType(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));

            try
            {
                System.Console.WriteLine("Entering method NoContentType.");
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(p2, nameof(p2));

                using PipelineMessage message = CreateNoContentTypeRequest(p1, p2, content, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method NoContentType.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> or <paramref name="p2"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> NoContentTypeAsync(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));

            try
            {
                System.Console.WriteLine("Entering method NoContentTypeAsync.");
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(p2, nameof(p2));

                using PipelineMessage message = CreateNoContentTypeRequest(p1, p2, content, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method NoContentTypeAsync.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/>, <paramref name="p2"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult NoContentType(string p1, string p2, RoundTripModel action)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = NoContentType(p1, p2, action, null);
            return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/>, <paramref name="p2"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> NoContentTypeAsync(string p1, string p2, RoundTripModel action)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = await NoContentTypeAsync(p1, p2, action, null).ConfigureAwait(false);
            return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionNoContentType()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionNoContentType.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionNoContentType.");
            }
        }

        internal PipelineMessage CreateHelloDemo2Request(RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> Return hi in demo2. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult HelloDemo2(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloDemo2.");
                using PipelineMessage message = CreateHelloDemo2Request(options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloDemo2.");
            }
        }

        /// <summary> Return hi in demo2. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> HelloDemo2Async(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloDemo2Async.");
                using PipelineMessage message = CreateHelloDemo2Request(options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloDemo2Async.");
            }
        }

        /// <summary> Return hi in demo2. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult HelloDemo2()
        {
            return HelloDemo2(null);
        }

        /// <summary> Return hi in demo2. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> HelloDemo2Async()
        {
            return await HelloDemo2Async(null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionHelloDemo2()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionHelloDemo2.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionHelloDemo2.");
            }
        }

        internal PipelineMessage CreateCreateLiteralRequest(BinaryContent content, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult CreateLiteral(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method CreateLiteral.");
                using PipelineMessage message = CreateCreateLiteralRequest(content, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method CreateLiteral.");
            }
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> CreateLiteralAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method CreateLiteralAsync.");
                using PipelineMessage message = CreateCreateLiteralRequest(content, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method CreateLiteralAsync.");
            }
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult CreateLiteral(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = CreateLiteral(body, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> CreateLiteralAsync(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await CreateLiteralAsync(body, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionCreateLiteral()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionCreateLiteral.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionCreateLiteral.");
            }
        }

        internal PipelineMessage CreateHelloLiteralRequest(RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> Send literal parameters. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult HelloLiteral(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloLiteral.");
                using PipelineMessage message = CreateHelloLiteralRequest(options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloLiteral.");
            }
        }

        /// <summary> Send literal parameters. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> HelloLiteralAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloLiteralAsync.");
                using PipelineMessage message = CreateHelloLiteralRequest(options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloLiteralAsync.");
            }
        }

        /// <summary> Send literal parameters. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult HelloLiteral()
        {
            return HelloLiteral(null);
        }

        /// <summary> Send literal parameters. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> HelloLiteralAsync()
        {
            return await HelloLiteralAsync(null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionHelloLiteral()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionHelloLiteral.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionHelloLiteral.");
            }
        }

        internal PipelineMessage CreateTopActionRequest(DateTimeOffset action, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult TopAction(DateTimeOffset action, RequestOptions options)
        {
            Argument.AssertNotNull(action, nameof(action));

            try
            {
                System.Console.WriteLine("Entering method TopAction.");
                Argument.AssertNotNull(action, nameof(action));

                using PipelineMessage message = CreateTopActionRequest(action, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TopAction.");
            }
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> TopActionAsync(DateTimeOffset action, RequestOptions options)
        {
            Argument.AssertNotNull(action, nameof(action));

            try
            {
                System.Console.WriteLine("Entering method TopActionAsync.");
                Argument.AssertNotNull(action, nameof(action));

                using PipelineMessage message = CreateTopActionRequest(action, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TopActionAsync.");
            }
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult TopAction(DateTimeOffset action)
        {
            Argument.AssertNotNull(action, nameof(action));

            return TopAction(action, null);
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> TopActionAsync(DateTimeOffset action)
        {
            Argument.AssertNotNull(action, nameof(action));

            return await TopActionAsync(action, null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionTopAction()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionTopAction.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionTopAction.");
            }
        }

        internal PipelineMessage CreateTopAction2Request(RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> top level method2. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult TopAction2(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method TopAction2.");
                using PipelineMessage message = CreateTopAction2Request(options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TopAction2.");
            }
        }

        /// <summary> top level method2. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> TopAction2Async(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method TopAction2Async.");
                using PipelineMessage message = CreateTopAction2Request(options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TopAction2Async.");
            }
        }

        /// <summary> top level method2. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult TopAction2()
        {
            return TopAction2(null);
        }

        /// <summary> top level method2. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> TopAction2Async()
        {
            return await TopAction2Async(null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionTopAction2()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionTopAction2.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionTopAction2.");
            }
        }

        internal PipelineMessage CreatePatchActionRequest(BinaryContent content, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> top level patch. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult PatchAction(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method PatchAction.");
                using PipelineMessage message = CreatePatchActionRequest(content, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method PatchAction.");
            }
        }

        /// <summary> top level patch. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> PatchActionAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method PatchActionAsync.");
                using PipelineMessage message = CreatePatchActionRequest(content, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method PatchActionAsync.");
            }
        }

        /// <summary> top level patch. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult PatchAction(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = PatchAction(body, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> top level patch. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> PatchActionAsync(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await PatchActionAsync(body, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionPatchAction()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionPatchAction.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionPatchAction.");
            }
        }

        internal PipelineMessage CreateAnonymousBodyRequest(BinaryContent content, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AnonymousBody(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method AnonymousBody.");
                using PipelineMessage message = CreateAnonymousBodyRequest(content, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method AnonymousBody.");
            }
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AnonymousBodyAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method AnonymousBodyAsync.");
                using PipelineMessage message = CreateAnonymousBodyRequest(content, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method AnonymousBodyAsync.");
            }
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <param name="Thing"> A model with a few properties of literal types. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="Thing"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AnonymousBody(Thing Thing)
        {
            Argument.AssertNotNull(Thing, nameof(Thing));

            ClientResult result = AnonymousBody(Thing, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <param name="Thing"> A model with a few properties of literal types. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="Thing"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AnonymousBodyAsync(Thing Thing)
        {
            Argument.AssertNotNull(Thing, nameof(Thing));

            ClientResult result = await AnonymousBodyAsync(Thing, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionAnonymousBody()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionAnonymousBody.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionAnonymousBody.");
            }
        }

        internal PipelineMessage CreateFriendlyModelRequest(BinaryContent content, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FriendlyModel(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method FriendlyModel.");
                using PipelineMessage message = CreateFriendlyModelRequest(content, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method FriendlyModel.");
            }
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FriendlyModelAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method FriendlyModelAsync.");
                using PipelineMessage message = CreateFriendlyModelRequest(content, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method FriendlyModelAsync.");
            }
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <param name="Friend"> this is not a friendly model but with a friendly name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="Friend"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult FriendlyModel(Friend Friend)
        {
            Argument.AssertNotNull(Friend, nameof(Friend));

            ClientResult result = FriendlyModel(Friend, null);
            return ClientResult.FromValue((Friend)result, result.GetRawResponse());
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <param name="Friend"> this is not a friendly model but with a friendly name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="Friend"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> FriendlyModelAsync(Friend Friend)
        {
            Argument.AssertNotNull(Friend, nameof(Friend));

            ClientResult result = await FriendlyModelAsync(Friend, null).ConfigureAwait(false);
            return ClientResult.FromValue((Friend)result, result.GetRawResponse());
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionFriendlyModel()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionFriendlyModel.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionFriendlyModel.");
            }
        }

        internal PipelineMessage CreateAddTimeHeaderRequest(DateTimeOffset repeatabilityFirstSent, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> addTimeHeader. </summary>
        /// <param name="repeatabilityFirstSent"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddTimeHeader(DateTimeOffset repeatabilityFirstSent, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method AddTimeHeader.");
                using PipelineMessage message = CreateAddTimeHeaderRequest(repeatabilityFirstSent, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method AddTimeHeader.");
            }
        }

        /// <summary> addTimeHeader. </summary>
        /// <param name="repeatabilityFirstSent"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddTimeHeaderAsync(DateTimeOffset repeatabilityFirstSent, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method AddTimeHeaderAsync.");
                using PipelineMessage message = CreateAddTimeHeaderRequest(repeatabilityFirstSent, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method AddTimeHeaderAsync.");
            }
        }

        /// <summary> addTimeHeader. </summary>
        /// <param name="repeatabilityFirstSent"></param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddTimeHeader(DateTimeOffset repeatabilityFirstSent)
        {
            return AddTimeHeader(repeatabilityFirstSent, null);
        }

        /// <summary> addTimeHeader. </summary>
        /// <param name="repeatabilityFirstSent"></param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddTimeHeaderAsync(DateTimeOffset repeatabilityFirstSent)
        {
            return await AddTimeHeaderAsync(repeatabilityFirstSent, null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionAddTimeHeader()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionAddTimeHeader.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionAddTimeHeader.");
            }
        }

        internal PipelineMessage CreateProjectedNameModelRequest(BinaryContent content, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> Model can have its projected name. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult ProjectedNameModel(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method ProjectedNameModel.");
                using PipelineMessage message = CreateProjectedNameModelRequest(content, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method ProjectedNameModel.");
            }
        }

        /// <summary> Model can have its projected name. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> ProjectedNameModelAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method ProjectedNameModelAsync.");
                using PipelineMessage message = CreateProjectedNameModelRequest(content, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method ProjectedNameModelAsync.");
            }
        }

        /// <summary> Model can have its projected name. </summary>
        /// <param name="ProjectedModel"> this is a model with a projected name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ProjectedModel"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult ProjectedNameModel(ProjectedModel ProjectedModel)
        {
            Argument.AssertNotNull(ProjectedModel, nameof(ProjectedModel));

            ClientResult result = ProjectedNameModel(ProjectedModel, null);
            return ClientResult.FromValue((ProjectedModel)result, result.GetRawResponse());
        }

        /// <summary> Model can have its projected name. </summary>
        /// <param name="ProjectedModel"> this is a model with a projected name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ProjectedModel"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> ProjectedNameModelAsync(ProjectedModel ProjectedModel)
        {
            Argument.AssertNotNull(ProjectedModel, nameof(ProjectedModel));

            ClientResult result = await ProjectedNameModelAsync(ProjectedModel, null).ConfigureAwait(false);
            return ClientResult.FromValue((ProjectedModel)result, result.GetRawResponse());
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionProjectedNameModel()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionProjectedNameModel.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionProjectedNameModel.");
            }
        }

        internal PipelineMessage CreateReturnsAnonymousModelRequest(RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> return anonymous model. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult ReturnsAnonymousModel(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method ReturnsAnonymousModel.");
                using PipelineMessage message = CreateReturnsAnonymousModelRequest(options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method ReturnsAnonymousModel.");
            }
        }

        /// <summary> return anonymous model. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> ReturnsAnonymousModelAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method ReturnsAnonymousModelAsync.");
                using PipelineMessage message = CreateReturnsAnonymousModelRequest(options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method ReturnsAnonymousModelAsync.");
            }
        }

        /// <summary> return anonymous model. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult ReturnsAnonymousModel()
        {
            return ReturnsAnonymousModel(null);
        }

        /// <summary> return anonymous model. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> ReturnsAnonymousModelAsync()
        {
            return await ReturnsAnonymousModelAsync(null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionReturnsAnonymousModel()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionReturnsAnonymousModel.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionReturnsAnonymousModel.");
            }
        }

        internal PipelineMessage CreateGetUnknownValueRequest(RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> get extensible enum. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetUnknownValue(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method GetUnknownValue.");
                using PipelineMessage message = CreateGetUnknownValueRequest(options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method GetUnknownValue.");
            }
        }

        /// <summary> get extensible enum. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetUnknownValueAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method GetUnknownValueAsync.");
                using PipelineMessage message = CreateGetUnknownValueRequest(options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method GetUnknownValueAsync.");
            }
        }

        /// <summary> get extensible enum. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult GetUnknownValue()
        {
            return GetUnknownValue(null);
        }

        /// <summary> get extensible enum. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> GetUnknownValueAsync()
        {
            return await GetUnknownValueAsync(null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionGetUnknownValue()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionGetUnknownValue.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionGetUnknownValue.");
            }
        }

        internal PipelineMessage CreateInternalProtocolRequest(BinaryContent content, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult InternalProtocol(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method InternalProtocol.");
                using PipelineMessage message = CreateInternalProtocolRequest(content, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method InternalProtocol.");
            }
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> InternalProtocolAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method InternalProtocolAsync.");
                using PipelineMessage message = CreateInternalProtocolRequest(content, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method InternalProtocolAsync.");
            }
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult InternalProtocol(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = InternalProtocol(body, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> InternalProtocolAsync(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await InternalProtocolAsync(body, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionInternalProtocol()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionInternalProtocol.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionInternalProtocol.");
            }
        }

        internal PipelineMessage CreateStillConvenientRequest(RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StillConvenient(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method StillConvenient.");
                using PipelineMessage message = CreateStillConvenientRequest(options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method StillConvenient.");
            }
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StillConvenientAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method StillConvenientAsync.");
                using PipelineMessage message = CreateStillConvenientRequest(options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method StillConvenientAsync.");
            }
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult StillConvenient()
        {
            return StillConvenient(null);
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> StillConvenientAsync()
        {
            return await StillConvenientAsync(null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionStillConvenient()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionStillConvenient.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionStillConvenient.");
            }
        }

        internal PipelineMessage CreateHeadAsBooleanRequest(string id, RequestOptions options)
        {
            throw new NotImplementedException("Method not implemented.");
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult HeadAsBoolean(string id, RequestOptions options)
        {
            Argument.AssertNotNull(id, nameof(id));

            try
            {
                System.Console.WriteLine("Entering method HeadAsBoolean.");
                Argument.AssertNotNull(id, nameof(id));

                using PipelineMessage message = CreateHeadAsBooleanRequest(id, options);
                return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HeadAsBoolean.");
            }
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> HeadAsBooleanAsync(string id, RequestOptions options)
        {
            Argument.AssertNotNull(id, nameof(id));

            try
            {
                System.Console.WriteLine("Entering method HeadAsBooleanAsync.");
                Argument.AssertNotNull(id, nameof(id));

                using PipelineMessage message = CreateHeadAsBooleanRequest(id, options);
                return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HeadAsBooleanAsync.");
            }
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult HeadAsBoolean(string id)
        {
            Argument.AssertNotNull(id, nameof(id));

            return HeadAsBoolean(id, null);
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> HeadAsBooleanAsync(string id)
        {
            Argument.AssertNotNull(id, nameof(id));

            return await HeadAsBooleanAsync(id, null).ConfigureAwait(false);
        }

        /// <summary> Test expression body conversion. </summary>
        /// <returns> Returns an int. </returns>
        public int TestExpressionBodyConversionHeadAsBoolean()
        {
            try
            {
                System.Console.WriteLine("Entering method TestExpressionBodyConversionHeadAsBoolean.");
                return 42;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TestExpressionBodyConversionHeadAsBoolean.");
            }
        }
    }
}
