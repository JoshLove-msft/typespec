// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace SampleTypeSpec
{
    /// <summary> A sample dynamic model. </summary>
    public partial class DynamicModel : IJsonModel<DynamicModel>
    {
        /// <summary> Initializes a new instance of <see cref="DynamicModel"/> for deserialization. </summary>
        internal DynamicModel()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DynamicModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DynamicModel)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("foo"u8);
            writer.WriteObjectValue(Foo, options);
            writer.WritePropertyName("listFoo"u8);
            writer.WriteStartArray();
            foreach (AnotherDynamicModel item in ListFoo)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("listOfListFoo"u8);
            writer.WriteStartArray();
            foreach (IList<AnotherDynamicModel> item in ListOfListFoo)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartArray();
                foreach (AnotherDynamicModel item0 in item)
                {
                    writer.WriteObjectValue(item0, options);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndArray();
            writer.WritePropertyName("dictionaryFoo"u8);
            writer.WriteStartObject();
            foreach (var item in DictionaryFoo)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value, options);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("dictionaryListFoo"u8);
            writer.WriteStartObject();
            foreach (var item in DictionaryListFoo)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartArray();
                foreach (AnotherDynamicModel item0 in item.Value)
                {
                    writer.WriteObjectValue(item0, options);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WritePropertyName("listOfDictionaryFoo"u8);
            writer.WriteStartArray();
            foreach (IDictionary<string, AnotherDynamicModel> item in ListOfDictionaryFoo)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartObject();
                foreach (var item0 in item)
                {
                    writer.WritePropertyName(item0.Key);
                    writer.WriteObjectValue(item0.Value, options);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DynamicModel IJsonModel<DynamicModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DynamicModel JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DynamicModel)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDynamicModel(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DynamicModel DeserializeDynamicModel(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            AnotherDynamicModel foo = default;
            IList<AnotherDynamicModel> listFoo = default;
            IList<IList<AnotherDynamicModel>> listOfListFoo = default;
            IDictionary<string, AnotherDynamicModel> dictionaryFoo = default;
            IDictionary<string, IList<AnotherDynamicModel>> dictionaryListFoo = default;
            IList<IDictionary<string, AnotherDynamicModel>> listOfDictionaryFoo = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = default;
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("name"u8))
                {
                    name = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("foo"u8))
                {
                    foo = AnotherDynamicModel.DeserializeAnotherDynamicModel(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("listFoo"u8))
                {
                    List<AnotherDynamicModel> array = new List<AnotherDynamicModel>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(AnotherDynamicModel.DeserializeAnotherDynamicModel(item, options));
                    }
                    listFoo = array;
                    continue;
                }
                if (prop.NameEquals("listOfListFoo"u8))
                {
                    List<IList<AnotherDynamicModel>> array = new List<IList<AnotherDynamicModel>>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<AnotherDynamicModel> array0 = new List<AnotherDynamicModel>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array0.Add(AnotherDynamicModel.DeserializeAnotherDynamicModel(item0, options));
                            }
                            array.Add(array0);
                        }
                    }
                    listOfListFoo = array;
                    continue;
                }
                if (prop.NameEquals("dictionaryFoo"u8))
                {
                    Dictionary<string, AnotherDynamicModel> dictionary = new Dictionary<string, AnotherDynamicModel>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        dictionary.Add(prop0.Name, AnotherDynamicModel.DeserializeAnotherDynamicModel(prop0.Value, options));
                    }
                    dictionaryFoo = dictionary;
                    continue;
                }
                if (prop.NameEquals("dictionaryListFoo"u8))
                {
                    Dictionary<string, IList<AnotherDynamicModel>> dictionary = new Dictionary<string, IList<AnotherDynamicModel>>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            List<AnotherDynamicModel> array = new List<AnotherDynamicModel>();
                            foreach (var item in prop0.Value.EnumerateArray())
                            {
                                array.Add(AnotherDynamicModel.DeserializeAnotherDynamicModel(item, options));
                            }
                            dictionary.Add(prop0.Name, array);
                        }
                    }
                    dictionaryListFoo = dictionary;
                    continue;
                }
                if (prop.NameEquals("listOfDictionaryFoo"u8))
                {
                    List<IDictionary<string, AnotherDynamicModel>> array = new List<IDictionary<string, AnotherDynamicModel>>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            Dictionary<string, AnotherDynamicModel> dictionary = new Dictionary<string, AnotherDynamicModel>();
                            foreach (var prop0 in item.EnumerateObject())
                            {
                                dictionary.Add(prop0.Name, AnotherDynamicModel.DeserializeAnotherDynamicModel(prop0.Value, options));
                            }
                            array.Add(dictionary);
                        }
                    }
                    listOfDictionaryFoo = array;
                    continue;
                }
            }
            return new DynamicModel(
                name,
                foo,
                listFoo,
                listOfListFoo,
                dictionaryFoo,
                dictionaryListFoo,
                listOfDictionaryFoo,
                patch);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DynamicModel>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, SampleTypeSpecContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DynamicModel)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DynamicModel IPersistableModel<DynamicModel>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DynamicModel PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDynamicModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DynamicModel)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DynamicModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="dynamicModel"> The <see cref="DynamicModel"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(DynamicModel dynamicModel)
        {
            if (dynamicModel == null)
            {
                return null;
            }
            return BinaryContent.Create(dynamicModel, ModelSerializationExtensions.WireOptions);
        }

        /// <summary></summary>
        /// <param name="jsonPath"></param>
        /// <param name="value"></param>
        /// <returns></returns>
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateGet(ReadOnlySpan<byte> jsonPath, out JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();
            value = default;

            if (local.StartsWith("foo"u8))
            {
                return Foo.Patch.TryGetEncodedValue([.. "$"u8, .. local.Slice("foo"u8.Length)], out value);
            }
            if (local.StartsWith("listFoo"u8))
            {
                int propertyLength = "listFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                return ListFoo[index].Patch.TryGetEncodedValue([.. "$"u8, .. currentSlice.Slice(bytesConsumed)], out value);
            }
            if (local.StartsWith("listOfListFoo"u8))
            {
                int propertyLength = "listOfListFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                currentSlice = currentSlice.Slice(bytesConsumed);
                if (!currentSlice.TryGetIndex(out int index0, out int bytesConsumed0))
                {
                    return false;
                }
                return ListOfListFoo[index][index0].Patch.TryGetEncodedValue([.. "$"u8, .. currentSlice.Slice(bytesConsumed0)], out value);
            }
            if (local.StartsWith("dictionaryFoo"u8))
            {
                int propertyLength = "dictionaryFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                string key = currentSlice.GetFirstPropertyName(out int i);
                if (!DictionaryFoo.TryGetValue(key, out AnotherDynamicModel item))
                {
                    return false;
                }
                return item.Patch.TryGetEncodedValue([.. "$"u8, .. currentSlice.GetRemainder(i)], out value);
            }
            if (local.StartsWith("dictionaryListFoo"u8))
            {
                int propertyLength = "dictionaryListFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                string key = currentSlice.GetFirstPropertyName(out int i);
                if (!DictionaryListFoo.TryGetValue(key, out IList<AnotherDynamicModel> item))
                {
                    return false;
                }
                currentSlice = currentSlice.GetRemainder(i);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                return item[index].Patch.TryGetEncodedValue([.. "$"u8, .. currentSlice.Slice(bytesConsumed)], out value);
            }
            if (local.StartsWith("listOfDictionaryFoo"u8))
            {
                int propertyLength = "listOfDictionaryFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                currentSlice = currentSlice.Slice(bytesConsumed);
                string key = currentSlice.GetFirstPropertyName(out int i);
                if (!ListOfDictionaryFoo[index].TryGetValue(key, out AnotherDynamicModel item))
                {
                    return false;
                }
                return item.Patch.TryGetEncodedValue([.. "$"u8, .. currentSlice.GetRemainder(i)], out value);
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

        /// <summary></summary>
        /// <param name="jsonPath"></param>
        /// <param name="value"></param>
        /// <returns></returns>
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateSet(ReadOnlySpan<byte> jsonPath, JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();

            if (local.StartsWith("foo"u8))
            {
                Foo.Patch.Set([.. "$"u8, .. local.Slice("foo"u8.Length)], value);
                return true;
            }
            if (local.StartsWith("listFoo"u8))
            {
                int propertyLength = "listFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                ListFoo[index].Patch.Set([.. "$"u8, .. currentSlice.Slice(bytesConsumed)], value);
                return true;
            }
            if (local.StartsWith("listOfListFoo"u8))
            {
                int propertyLength = "listOfListFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                currentSlice = currentSlice.Slice(bytesConsumed);
                if (!currentSlice.TryGetIndex(out int index0, out int bytesConsumed0))
                {
                    return false;
                }
                ListOfListFoo[index][index0].Patch.Set([.. "$"u8, .. currentSlice.Slice(bytesConsumed0)], value);
                return true;
            }
            if (local.StartsWith("dictionaryFoo"u8))
            {
                int propertyLength = "dictionaryFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                string key = currentSlice.GetFirstPropertyName(out int i);
                if (!DictionaryFoo.TryGetValue(key, out AnotherDynamicModel item))
                {
                    return false;
                }
                item.Patch.Set([.. "$"u8, .. currentSlice.GetRemainder(i)], value);
                return true;
            }
            if (local.StartsWith("dictionaryListFoo"u8))
            {
                int propertyLength = "dictionaryListFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                string key = currentSlice.GetFirstPropertyName(out int i);
                if (!DictionaryListFoo.TryGetValue(key, out IList<AnotherDynamicModel> item))
                {
                    return false;
                }
                currentSlice = currentSlice.GetRemainder(i);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                item[index].Patch.Set([.. "$"u8, .. currentSlice.Slice(bytesConsumed)], value);
                return true;
            }
            if (local.StartsWith("listOfDictionaryFoo"u8))
            {
                int propertyLength = "listOfDictionaryFoo"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                currentSlice = currentSlice.Slice(bytesConsumed);
                string key = currentSlice.GetFirstPropertyName(out int i);
                if (!ListOfDictionaryFoo[index].TryGetValue(key, out AnotherDynamicModel item))
                {
                    return false;
                }
                item.Patch.Set([.. "$"u8, .. currentSlice.GetRemainder(i)], value);
                return true;
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
    }
}
